// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// For Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 

model Bagian {
  id            Int       @id @default(autoincrement())
  nama_bagian   String
  kepala_bagian String
  Jabatan       Jabatan[]
}

model Jabatan {
  id           Int        @id @default(autoincrement())
  nama_jabatan String
  bagianId     Bagian     @relation(fields: [id_bagian], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_bagian    Int
  Pengguna     Pengguna[]
}

model JenisCuti {
  id               Int                @id @default(autoincrement())
  nama_cuti        String
  lama_cuti        Int
  Cuti             Cuti[]
  VerifikasiBerkas VerifikasiBerkas[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Pengguna {
  id                Int                @id @default(autoincrement())
  nip               String
  nama              String
  jabatanId         Jabatan            @relation(fields: [id_jabatan], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_jabatan        Int
  tempat_lahir      String
  tanggal_lahir     DateTime
  jenis_kelamin     JenisKelamin
  email             String             @unique
  password          String             @unique
  foto              String             @db.Text
  role              RolePengguna
  idPenggantiOnCuti Cuti[]             @relation("idPegawaiPengganti")
  idPenggunaOnCuti  Cuti[]             @relation("idPengguna")
  VerifikasiBerkas  VerifikasiBerkas[]
}

enum JenisKelamin {
  PRIA
  WANITA
}

enum RolePengguna {
  KARYAWAN
  ATASAN
  VERIFIKATOR
  KEPALA
  ADMIN
}

// 

model Cuti {
  id                   Int                @id @default(autoincrement())
  nip                  String
  nama                 String
  jenisCutiId          JenisCuti          @relation(fields: [id_jenis_cuti], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_jenis_cuti        Int
  lama_cuti            Int
  tanggal_pengajuan    DateTime
  tanggal_mulai        DateTime
  tanggal_selesai      DateTime
  tanggal_array        Json
  keterangan           String
  alamat_selama_cuti   String
  berkas               String             @db.Text
  penggantiId          Pengguna           @relation("idPegawaiPengganti", fields: [id_pegawai_pengganti], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_pegawai_pengganti Int
  penggunaId           Pengguna           @relation("idPengguna", fields: [id_pengguna], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_pengguna          Int
  status               StatusCuti         @default(PROSES)
  VerifikasiBerkas     VerifikasiBerkas[]
}

enum StatusCuti {
  PROSES
  DITERIMA
  DITOLAK
}

// 

model VerifikasiBerkas {
  id                    Int       @id @default(autoincrement())
  jenisCutiId           JenisCuti @relation(fields: [id_jenis_cuti], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_jenis_cuti         Int
  cutiId                Cuti      @relation(fields: [id_cuti], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_cuti               Int
  nip                   String
  penggunaId            Pengguna  @relation(fields: [id_pengguna], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_pengguna           Int
  tanggal_verifikasi    DateTime
  keterangan_verifikasi String
  surat_cuti            Int
  formulir_cuti         Int
  berita_acara          Int
  berkas_cuti           Int
  status_verifikasi     Int?
}
